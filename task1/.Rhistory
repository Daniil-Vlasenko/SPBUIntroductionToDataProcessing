rm(file)
mean(df[df[, owner] == "no", "dependents"])
mean(df[df[, "owner"] == "no", "dependents"])
writeLines(c("Average amount of dependents for people don't own their home:", mean(df[df[, "owner"] == "no", "dependents"])), fileConn)
writeLines(c("Average amount of dependents for people don't own their home:", mean(df[df[, "owner"] == "no", "dependents"])), output)
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"]), "\n"), output)
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"]), "\n"), output)
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])), output)
mean(df[df[, "incomeLevel"] == "low", "age"])
mean(df[df[, "incomeLevel"] == "low"], "age"])
mean(df[df[, "owner"] == "no", "dependents"])
mean(df[df[, "incomeLevel"] == "low", "age"])
df[df[, "incomeLevel"] == "low", "age"]
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
df[df[, "incomeLevel"] == "low", "age"]
mean(df[df[, "incomeLevel"] == "low", "age"])
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])),
"Average amount of age for people with low income:",
mean(df[df[, "incomeLevel"] == "low", "age"]),
"Average amount of age for people with average income:",
mean(df[df[, "incomeLevel"] == "average", "age"]),
"Average amount of age for people with high income:",
mean(df[df[, "incomeLevel"] == "high", "age"]),
output)
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"]),
"Average amount of age for people with low income:",
mean(df[df[, "incomeLevel"] == "low", "age"]),
"Average amount of age for people with average income:",
mean(df[df[, "incomeLevel"] == "average", "age"]),
"Average amount of age for people with high income:",
mean(df[df[, "incomeLevel"] == "high", "age"])),
output)
df
df[order(df[,["age"]]),]
df[,["age"]]
df[order(df[,"age"]),]
df[order(df[,"age"]) and df[,"card"] == "no",]
df[order(df[,"age"]) & df[,"card"] == "no",]
df[order(df[,"age"]),]
dfSorted <- df[order(df[,"age"]),]
dfSorted <- dfSorted[dfSorted[,"card"] = "no",]
dfSorted <- dfSorted[dfSorted[,"card"] == "no",]
dfSorted
dfSorted[1:5,]
tail(dfSorted, 5)
writeLines(c("Top 5 youngest and eldest people, whose application was declined: ",
dfSorted[1:5,], tail(dfSorted, 5)), output)
writeLines("Top 5 youngest and eldest people, whose application was declined: ", output)
writeLines("Top 5 youngest and eldest people, whose application was declined: ", output, ,append=TRUE)
writeLines("Top 5 youngest and eldest people, whose application was declined: ", output, append=TRUE)
write("Top 5 youngest and eldest people, whose application was declined: ", output, append=TRUE)
write("Top 5 youngest and eldest people, whose application was declined: ", output, append=TRUE)
write("asdasdasd", output, append=TRUE)
write("2222", output, append=TRUE)
write("2222", file = "output.txt", append=TRUE)
write("Top 5 youngest and eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write(dfSorted[1:5,], file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", append=TRUE)
write.table(tail(dfSorted, 5), file = "output.txt", append=TRUE, col.names = FALSE)
write.table(tail(dfSorted, 5), file = "output.txt", sep = ";", append=TRUE, col.names = FALSE)
dfSorted <- df[order(df[,"income"]),]
dfSorted
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
dfSorted <- df[order(df[,"income"]),]
dfSorted
mean(tail(dfSorted, 10)[, "majorcards"])
tail(dfSorted, 10)
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(tail(dfSorted, 10)[, "majorcards"]),
file = "output.txt", append=TRUE)
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
today <- as.Date("2000-01-01")
df[,"months"] <- sapply(df["months"], FUN = f)
f <- function(x) as.numeric(today - (today %m-% months(x)))
df["months"] <- sapply(df["months"], FUN = f)
df[,"months"] <- sapply(df["months"], FUN = f)
rm(f)
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
today <- as.Date("2000-01-01")
df[, "months"] <- sapply(df["months"], FUN = function(x) as.numeric(today - (today %m-% months(x))))
df[1:5,]
order(df[,"age"])
dfSorted <- df[order(df[,"age"]) & dfSorted[,"card"] == "no",]
dfSorted
dfSorted <- df[order(df[,"age"]),]
dfSorted
df[, "months"] <- sapply(df["months"], FUN = function(x) as.numeric(today - (today %m-% months(x))))
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
install.packages("lubridate")
library("lubridate")
library("lubridate")
require("lubridate")
cat(2)
cat(require("lubridate"))
if (require("lubridate")) install.packages("lubridate")
if (!require("lubridate")) install.packages("lubridate")
library("lubridate")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- df[ df[, "selfemp"] == "yes", ]
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- sapply(df["months"], FUN = function(x) as.numeric(today - (today %m-% months(x))))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
# Define criterion of income level, and split data according to levels of this criterion.
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"]),
"Average amount of age for people with low income:",
mean(df[df[, "incomeLevel"] == "low", "age"]),
"Average amount of age for people with average income:",
mean(df[df[, "incomeLevel"] == "average", "age"]),
"Average amount of age for people with high income:",
mean(df[df[, "incomeLevel"] == "high", "age"])),
output)
dfSorted <- df[order(df[,"age"]),]
dfSorted <- dfSorted[dfSorted[,"card"] == "no",]
write("Top 5 youngest and eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", sep = ";", append=TRUE)
write.table(tail(dfSorted, 5), file = "output.txt", sep = ";", append=TRUE, col.names = FALSE)
dfSorted <- df[order(df[,"income"]),]
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(tail(dfSorted, 10)[, "majorcards"]),
file = "output.txt", append=TRUE)
close(output)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
if (!require("lubridate")) install.packages("lubridate")
library("lubridate")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- df[ df[, "selfemp"] == "yes", ]
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- sapply(df["months"], FUN = function(x) as.numeric(today - (today %m-% months(x))))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
# Define criterion of income level, and split data according to levels of this criterion.
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"]),
"Average amount of age for people with low income:",
mean(df[df[, "incomeLevel"] == "low", "age"]),
"Average amount of age for people with average income:",
mean(df[df[, "incomeLevel"] == "average", "age"]),
"Average amount of age for people with high income:",
mean(df[df[, "incomeLevel"] == "high", "age"])),
output)
dfSorted <- df[order(df[,"age"]),]
dfSorted <- dfSorted[dfSorted[,"card"] == "no",]
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(tail(dfSorted, 5), file = "output.txt", sep = ";", append=TRUE, col.names = FALSE)
dfSorted <- df[order(df[,"income"]),]
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(tail(dfSorted, 10)[, "majorcards"]),
file = "output.txt", append=TRUE)
close(output)
tail(dfSorted, 10)
dfSorted <- df[order(df[,"age"]),]
dfSorted <- dfSorted[dfSorted[,"card"] == "no",]
dfSorted[1:5,]
tail(dfSorted, 5)
dfSorted <- df[order(df[,"income"]),]
tail(dfSorted, 10)
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, "selfemp" == "yes")
df
df <- subset(df, "selfemp" == "yes")
df <- subset(df, selfemp == "yes")
df
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
df
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, "selfemp" == "yes")
df
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes")
df
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- sapply(df["months"], FUN = function(x) as.numeric(today - (today %m-% months(x))))
if (!require("lubridate")) install.packages("lubridate")
library("lubridate")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- sapply(df["months"], FUN = function(x) as.numeric(today - (today %m-% months(x))))
df[, "months"] <- sapply(df["months"], function(x) as.numeric(today - (today %m-% months(x))))
df
df[, "months"] <- apply(df["months"], function(x) as.numeric(today - (today %m-% months(x))))
df[, "months"] <- apply(df["months"], FUN = function(x) as.numeric(today - (today %m-% months(x))))
df[, "months"] <- lapply(df["months"], FUN = function(x) as.numeric(today - (today %m-% months(x))))
df[, "months"] <- lapply(df["months"], function(x) as.numeric(today - (today %m-% months(x))))
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- lapply(df["months"], function(x) as.numeric(today - (today %m-% months(x))))
df
names(df)["months"] <- "days"
names(df)[months] <- "days"
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
subset(df, income < 2.5, incomeLevel) <- "low"
subset(df, income < 2.5, incomeLevel) <- "low"
subset(df, income < 2.5, incomeLevel)
df["incomeLevel"] <- 0
subset(df, income < 2.5, incomeLevel) <- "low"
subset(df, income < 2.5, incomeLevel)
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- lapply(df["months"], function(x) as.numeric(today - (today %m-% months(x))))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
df[subset(df, income < 2.5,), "incomeLevel"] = "low"
df[df[, "income"] < 2.5, "incomeLevel"]
df[df[, "income"] < 2.5, "incomeLevel"] = 0
df[df[, "income"] < 2.5, "incomeLevel"]
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[subset(df, income < 2.5,), "incomeLevel"]
subset(df, income < 2.5, incomeLevel)
subset(df, income < 2.5, incomeLevel) = 3
subset(df, income < 2.5, incomeLevel) <- 3
df$incomeLevel = NA
df[subset(df, income < 2.5,), incomeLevel] <- 3
df[subset(df, income < 2.5,), "incomeLevel"] <- 3
values <- data.frame(value = c("a", "a", "a", "a", "a",
"b", "b", "b",
"c", "c", "c", "c"))
nr.of.appearances <- aggregate(x = values,
by = list(unique.values = values$value),
FUN = length)
nr.of.appearances
values
aggregate(df, df["dependents"], FUN=mean)
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- lapply(df["months"], function(x) as.numeric(today - (today %m-% months(x))))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
# Define criterion of income level, and split data according to levels of this criterion.
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
aggregate(df, df["dependents"], FUN=mean)
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- lapply(df["months"], function(x) as.numeric(today - (today %m-% months(x))))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
# Define criterion of income level, and split data according to levels of this criterion.
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
df
aggregate(df, df["dependents"], FUN=mean)
aggregate(df[df[, "owner"] == "no",], df["dependents"], FUN=mean)
aggregate(df[df[, "owner"] == "no",], df[,"dependents"], FUN=mean)
aggregate(df[df[, "owner"] == "no",], df["dependents"], FUN=mean)
aggregate(df, df["dependents"], FUN=mean)
aggregate(df, df["incomeLevel"], FUN=mean)
aggregate(subset(df, , c(incomeLevel, age)), df["incomeLevel"], FUN=mean)
aggregate(subset(df, , age), df["incomeLevel"], FUN=mean)
aggregate(df[age], df["incomeLevel"], FUN=mean)
aggregate(df["age"], df["incomeLevel"], FUN=mean)
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- lapply(df["months"], function(x) as.numeric(today - (today %m-% months(x))))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
# Define criterion of income level, and split data according to levels of this criterion.
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])), output)
sub.df <- aggregate(df["age"], df["incomeLevel"], FUN=mean)
names(sub.df)[names(sub.df) == "averageAge"] <- "days"
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- lapply(df["months"], function(x) as.numeric(today - (today %m-% months(x))))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
# Define criterion of income level, and split data according to levels of this criterion.
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])), output)
sub.df <- aggregate(df["age"], df["incomeLevel"], FUN=mean)
names(sub.df)[names(sub.df) == "age"] <- "averageAge"
write("Average age in each income groups:", output)
write.table(sub.df, file = "output.txt", sep = ";", append=TRUE)
order(df[,"age"])
#----------------------------------------------------------------------------
dfSorted <- df[order(df[,"age"]),]
dfSorted <- subset(dfSorted, card == "no",)
dfSorted
dfSorted <- df[order(df[,"age"]),]
dfSorted <- subset(dfSorted, card == "no",)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(tail(dfSorted, 5), file = "output.txt", sep = ";", append=TRUE, col.names = FALSE)
dfSorted <- df[order(df[,"income"]),]
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(tail(dfSorted, 10)[, "majorcards"]),
file = "output.txt", append=TRUE)
close(output)
if (!require("lubridate")) install.packages("lubridate")
library("lubridate")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- lapply(df["months"], function(x) as.numeric(today - (today %m-% months(x))))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
# Define criterion of income level, and split data according to levels of this criterion.
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])), output)
sub.df <- aggregate(df["age"], df["incomeLevel"], FUN=mean)
names(sub.df)[names(sub.df) == "age"] <- "averageAge"
write("Average age in each income groups:", output)
write.table(sub.df, file = "output.txt", sep = ";", append=TRUE)
dfSorted <- df[order(df[,"age"]),]
dfSorted <- subset(dfSorted, card == "no",)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(tail(dfSorted, 5), file = "output.txt", sep = ";", append=TRUE)
dfSorted <- df[order(df[,"income"]),]
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(tail(dfSorted, 10)[, "majorcards"]),
file = "output.txt", append=TRUE)
close(output)
write(mean(tail(dfSorted, 10)[, "majorcards"]),
file = "output.txt", append=TRUE)
if (!require("lubridate")) install.packages("lubridate")
library("lubridate")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- lapply(df["months"], function(x) as.numeric(today - (today %m-% months(x))))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
# Define criterion of income level, and split data according to levels of this criterion.
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])), output)
sub.df <- aggregate(df["age"], df["incomeLevel"], FUN=mean)
names(sub.df)[names(sub.df) == "age"] <- "averageAge"
write("Average age in each income groups:", output)
write.table(sub.df, file = "output.txt", sep = ";", append=TRUE)
dfSorted <- df[order(df[,"age"]),]
dfSorted <- subset(dfSorted, card == "no",)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(tail(dfSorted, 5), file = "output.txt", sep = ";", append=TRUE)
dfSorted <- df[order(df[,"income"]),]
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(tail(dfSorted, 10)[, "majorcards"]),
file = "output.txt", append=TRUE)
close(output)
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- lapply(df["months"], function(x) as.numeric(today - (today %m-% months(x))))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
# Define criterion of income level, and split data according to levels of this criterion.
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
df[df[, "owner"] == "no", "dependents"]
df[df[, "owner"] == "no", "dependents"]
df[, "owner"] == "no"
df[order(df[,"age"]),]
order(df[,"age"])
sort(df)
sort(df[,"age"])
df[,"age"]
