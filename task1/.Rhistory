write("Average amount of dependents for people don't own their home:", file="output.txt")
write(mean(filter(df, owner == "no")$dependents), file="output.txt", append=TRUE)
df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age))
dfSorted <- df[order(df[,"age"]),]
dfSorted <- subset(dfSorted, card == "no",)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", sep = ";", append=TRUE)
write.table(dfSorted, file = "output.txt", sep = ";", append=TRUE)
dfSorted[1,]
class(dfSorted[1,])
class(dfSorted[1,"age"])
class(dfSorted[1,"incomeLevel"])
class(dfSorted[1,"card"])
if (!require("lubridate")) install.packages("lubridate")
if (!require("tidyr")) install.packages("dplyr")
library("lubridate")
library("dplyr")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- filter(df, selfemp == "yes")
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df$months <- as.numeric(today - (today %m-% months(df$months)))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df <- mutate(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
df$incomeLevel <- lapply(df$income, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
write("Average amount of dependents for people don't own their home:", file="output.txt")
write(mean(filter(df, owner == "no")$dependents), file="output.txt", append=TRUE)
dfnew <-df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age))
write("Average age in each income groups", file="output.txt", append=TRUE)
write.table(df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age))
, file = "output.txt", sep = ";", append=TRUE)
dfnew
write(dfnew, file="output.txt", append=TRUE )
dfnew$incomeLevel
dfnew$averageAge
as.vector(dfnew$incomeLevel)
vector(dfnew$incomeLevel)
as.vector(dfnew$incomeLevel)
class(as.vector(dfnew$incomeLevel))
write(dfnew$incomeLevel, file="output.txt", append=TRUE )
dfnew$incomeLevel
unsilst(dfnew$incomeLevel)
unlist(dfnew$incomeLevel)
write(unlist(dfnew$incomeLevel), file="output.txt", append=TRUE )
write(dfnew$averageAge, file="output.txt", append=TRUE )
write.table(dfnew, file = "output.txt", sep = ";", append=TRUE)
dfnew <- data.frame(unlist(dfnew$incomeLevel), dfnew$averageAge)
write("Average age in each income groups", file="output.txt", append=TRUE)
write.table(dfnew, file = "output.txt", sep = ";", append=TRUE)
if (!require("lubridate")) install.packages("lubridate")
if (!require("tidyr")) install.packages("dplyr")
library("lubridate")
library("dplyr")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- filter(df, selfemp == "yes")
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df$months <- as.numeric(today - (today %m-% months(df$months)))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df <- mutate(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
df$incomeLevel <- lapply(df$income, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
write("Average amount of dependents for people don't own their home:", file="output.txt")
write(mean(filter(df, owner == "no")$dependents), file="output.txt", append=TRUE)
dfnew <- df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age))
dfnew <- data.frame(unlist(dfnew$incomeLevel), dfnew$averageAge)
write("Average age in each income groups", file="output.txt", append=TRUE)
write.table(dfnew, file = "output.txt", sep = ";", append=TRUE)
?write.table
write.table(dfnew, file = "output.txt", sep = ";", append=TRUE, row.names=FALSE)
write.table(dfnew, file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=False)
write.table(dfnew, file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=FALSE)
if (!require("lubridate")) install.packages("lubridate")
if (!require("tidyr")) install.packages("dplyr")
library("lubridate")
library("dplyr")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- filter(df, selfemp == "yes")
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df$months <- as.numeric(today - (today %m-% months(df$months)))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df <- mutate(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
df$incomeLevel <- lapply(df$income, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
write("Average amount of dependents for people don't own their home:", file="output.txt")
write(mean(filter(df, owner == "no")$dependents), file="output.txt", append=TRUE)
dfnew <- df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age))
dfnew <- data.frame(unlist(dfnew$incomeLevel), dfnew$averageAge)
write("Average age in each income groups", file="output.txt", append=TRUE)
write.table(dfnew, file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=FALSE)
write.table(dfnew, file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=FALSE)
dfnew <- df %>% filter(card = "no")
dfnew <- df %>% filter(card = no)
dfnew <- df %>% filter(card == "no")
dfnew
dfnew <- df %>% filter(card == "no") %>% order()
dfnew <- df %>% filter(card == "no") %>% order("age")
dfnew <- df %>% filter(card == "no")
dfnew
class(dfnew)
dfnew <- df %>% filter(card == "no") %>% order("age")
order(dfnew$age)
order(filter(df, card == "no")$age
as
order(filter(df, card == "no"))$age
filter(df, card == "no")
order(filter(df, card == "no")&age)
order(filter(df, card == "no")$age)
order(filter(df, card == "no")$age) > tail(5)
order(filter(df, card == "no")$age)
tail(order(filter(df, card == "no")$age), n = 2)
tail(order(filter(df, card == "no")$age), 2)
order(filter(df, card == "no")$age) %>% tail(n=2)
order(filter(df, card == "no")$age) %>% tail(2)
filter(df, order(filter(df, card == "no")$age) %>% tail(5))
write.table(df[order(filter(df, card == "no")$age) %>% tail(5), file = "output.txt", sep = ";", append=TRUE])
filter(df, order(filter(df, card == "no")$age) %>% tail(5))
order(filter(df, card == "no")$age) %>% tail(n=2)
df[order(filter(df, card == "no")$age) %>% tail(n=2),]
write.table(df[order(filter(df, card == "no")$age) %>% tail(5),] file = "output.txt", sep = ";", append=TRUE)
write.table(df[order(filter(df, card == "no")$age) %>% tail(5),], file = "output.txt", sep = ";", append=TRUE)
df[order(filter(df, card == "no")$age) %>% tail(5),]
write.table(df[order(filter(df, card == "no")$age) %>% tail(5),], file = "output.txt", sep = ";", append=TRUE)
if (!require("lubridate")) install.packages("lubridate")
if (!require("tidyr")) install.packages("dplyr")
library("lubridate")
library("dplyr")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- filter(df, selfemp == "yes")
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df$months <- as.numeric(today - (today %m-% months(df$months)))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df <- mutate(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
df$incomeLevel <- lapply(df$income, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
write("Average amount of dependents for people don't own their home:", file="output.txt")
write(mean(filter(df, owner == "no")$dependents), file="output.txt", append=TRUE)
dfnew <- df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age))
dfnew <- data.frame(unlist(dfnew$incomeLevel), dfnew$averageAge)
write("Average age in each income groups:", file="output.txt", append=TRUE)
write.table(dfnew, file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=FALSE)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(df[order(filter(df, card == "no")$age) %>% tail(5),], file = "output.txt", sep = ";", append=TRUE)
class(df$card)
class(df$reports)
class(df$age)
class(df$incomeLevel)
df$incomeLevel <- sapply(df$income, FUN =  incomeLevel)
write.table(df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age)), file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=FALSE)
write.table(df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age)), file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=FALSE)
if (!require("lubridate")) install.packages("lubridate")
if (!require("tidyr")) install.packages("dplyr")
library("lubridate")
library("dplyr")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- filter(df, selfemp == "yes")
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df$months <- as.numeric(today - (today %m-% months(df$months)))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df <- mutate(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
df$incomeLevel <- sapply(df$income, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
write("Average amount of dependents for people don't own their home:", file="output.txt")
write(mean(filter(df, owner == "no")$dependents), file="output.txt", append=TRUE)
write("Average age in each income groups:", file="output.txt", append=TRUE)
write.table(df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age)),
file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=FALSE)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(df[order(filter(df, card == "no")$age) %>% tail(5),],
file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
filter(df, card == "no")
filter(df, card == "no")
dftmp < filter(df, card == "no")
dftmp <0 filter(df, card == "no")
dftmp <- filter(df, card == "no")
dftmo[order(dftmo$age),]
dftmp[order(dftmo$age),]
dftmp[order(dftmp$age),]
dftmp[order(dftmp$age)[1:5],]
df[order(filter(df, card == "no")$age)[1:5],]
dftmp <- filter(df, card == "no")
write.table(dftmp[order(dftmp$age)[1:5],],
file = "output.txt", sep = ";", append=TRUE)
if (!require("lubridate")) install.packages("lubridate")
if (!require("tidyr")) install.packages("dplyr")
library("lubridate")
library("dplyr")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- filter(df, selfemp == "yes")
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df$months <- as.numeric(today - (today %m-% months(df$months)))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df <- mutate(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
df$incomeLevel <- sapply(df$income, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
write("Average amount of dependents for people don't own their home:", file="output.txt")
write(mean(filter(df, owner == "no")$dependents), file="output.txt", append=TRUE)
write("Average age in each income groups:", file="output.txt", append=TRUE)
write.table(df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age)),
file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=FALSE)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
dftmp <- filter(df, card == "no")
write.table(dftmp[order(dftmp$age)[1:5],],
file = "output.txt", sep = ";", append=TRUE)
dftmp[order(dftmp$age) %>% tail(5),]
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dftmp[order(dftmp$age) %>% tail(5),], file = "output.txt", sep = ";", append=TRUE)
df[order(df$income) %>% tail(10),]
df[order(df$income) %>% tail(10),] %>% mean()
sort(df$income)
sort(df$income) %>% tail(10)
sort(df$income) %>% tail(10) %>% mean()
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(sort(df$income) %>% tail(10) %>% mean(), "majorcards"]),
file = "output.txt", append=TRUE)
write(sort(df$income) %>% tail(10) %>% mean(),
file = "output.txt", append=TRUE)
if (!require("lubridate")) install.packages("lubridate")
if (!require("tidyr")) install.packages("dplyr")
library("lubridate")
library("dplyr")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- filter(df, selfemp == "yes")
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df$months <- as.numeric(today - (today %m-% months(df$months)))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df <- mutate(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5) "low"
else if (x <= 8) "average"
else "high"
}
df$incomeLevel <- sapply(df$income, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
write("Average amount of dependents for people don't own their home:", file="output.txt")
write(mean(filter(df, owner == "no")$dependents), file="output.txt", append=TRUE)
write("Average age in each income groups:", file="output.txt", append=TRUE)
write.table(df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age)),
file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=FALSE)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
dftmp <- filter(df, card == "no")
order <- order(dftmp$age)
write.table(dftmp[order[1:5],],
file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dftmp[tail(order, 5),], file = "output.txt", sep = ";", append=TRUE)
if (!require("lubridate")) install.packages("lubridate")
if (!require("tidyr")) install.packages("dplyr")
library("lubridate")
library("dplyr")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- filter(df, selfemp == "yes")
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df$months <- as.numeric(today - (today %m-% months(df$months)))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df <- mutate(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5) "low"
else if (x <= 8) "average"
else "high"
}
df$incomeLevel <- sapply(df$income, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
write("Average amount of dependents for people don't own their home:", file="output.txt")
write(mean(filter(df, owner == "no")$dependents), file="output.txt", append=TRUE)
write("Average age in each income groups:", file="output.txt", append=TRUE)
write.table(df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age)),
file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=FALSE)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
dftmp <- filter(df, card == "no")
order <- order(dftmp$age)
write.table(dftmp[order[1:5],],
file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dftmp[tail(order, 5),], file = "output.txt", sep = ";", append=TRUE)
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(sort(df$income) %>% tail(10) %>% mean(),
file = "output.txt", append=TRUE)
close(output)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
dftmp <- filter(df, card == "no")
dftmp <- dftmp[order(dftmp$age),]
write.table(dftmp[1:5,],
file = "output.txt", sep = ";", append=TRUE)
if (!require("lubridate")) install.packages("lubridate")
if (!require("tidyr")) install.packages("dplyr")
library("lubridate")
library("dplyr")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- filter(df, selfemp == "yes")
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df$months <- as.numeric(today - (today %m-% months(df$months)))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df <- mutate(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5) "low"
else if (x <= 8) "average"
else "high"
}
df$incomeLevel <- sapply(df$income, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
write("Average amount of dependents for people don't own their home:", file="output.txt")
write(mean(filter(df, owner == "no")$dependents), file="output.txt", append=TRUE)
write("Average age in each income groups:", file="output.txt", append=TRUE)
write.table(df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age)),
file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=FALSE)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
dftmp <- filter(df, card == "no")
dftmp <- dftmp[order(dftmp$age),]
write.table(dftmp[1:5,],
file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(tail(dftmp, 5), file = "output.txt", sep = ";", append=TRUE)
write
write
if (!require("lubridate")) install.packages("lubridate")
if (!require("tidyr")) install.packages("dplyr")
library("lubridate")
library("dplyr")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- filter(df, selfemp == "yes")
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df$months <- as.numeric(today - (today %m-% months(df$months)))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df <- mutate(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5) "low"
else if (x <= 8) "average"
else "high"
}
df$incomeLevel <- sapply(df$income, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
write("Average amount of dependents for people don't own their home:", file="output.txt")
write(mean(filter(df, owner == "no")$dependents), file="output.txt", append=TRUE)
write("Average age in each income groups:", file="output.txt", append=TRUE)
write.table(df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age)),
file = "output.txt", sep = ";", append=TRUE, row.names=FALSE, col.names=FALSE)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
dftmp <- filter(df, card == "no")
dftmp <- dftmp[order(dftmp$age),]
write.table(dftmp[1:5,], file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ", file = "output.txt", append=TRUE)
write.table(tail(dftmp, 5), file = "output.txt", sep = ";", append=TRUE)
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(sort(df$income) %>% tail(10) %>% mean(),
file = "output.txt", append=TRUE)
close(output)
