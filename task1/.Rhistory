debugSource("~/programming/R/Tasks/task1/task1.R")
debugSource("~/programming/R/Tasks/task1/task1.R")
debugSource("~/programming/R/Tasks/task1/task1.R")
debugSource("~/programming/R/Tasks/task1/task1.R")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- as.numeric(today - (today %m-% months(df[, "months"])))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
# df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
df <- transform(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
debugSource("~/programming/R/Tasks/task1/task1.R")
df
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- as.numeric(today - (today %m-% months(df[, "months"])))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
# df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
df <- transform(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
sapply(df["income"], FUN =  incomeLevel)
sapply(df["income"], FUN =  incomeLevel)
mapply(df["income"], FUN =  incomeLevel)
sapply(FUN =  incomeLevel, df["income"])
mapply(FUN =  incomeLevel, df["income"])
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x, y){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
mapply(FUN =  incomeLevel, df["income"], 1)
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(y, x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
mapply(FUN =  incomeLevel, 1, df["income"])
sapply(FUN =  incomeLevel, as.vector(df["income"])
)
sapply(as.vector(df["income"]), FUN =  incomeLevel)
sapply(df["income"], FUN =  incomeLevel)
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
sapply(df["income"], FUN =  incomeLevel)
x
incomeLevel(x)
incomeLevel(x["income"])
incomeLevel(1)
incomeLevel(2)
incomeLevel(9)
incomeLevel(5)
sapply(c(1,5,9), FUN = incomeLevel)
list(df["income"])
class(df["income"])
sapply(list(df["income"]), FUN =  incomeLevel)
sapply(c(1,5,9), FUN = incomeLevel)
class(df["income"])
class(list(df["income"]))
lapply(c(1,5,9), FUN = incomeLevel)
sapply(c(1,5,9), FUN = incomeLevel)
class(sapply(c(1,5,9), FUN = incomeLevel))
lapply(c(1,5,9), FUN = incomeLevel)
class(lapply(c(1,5,9), FUN = incomeLevel))
class(list(df["income"]), FUN = incomeLevel))
class(as.list(df["income"]), FUN = incomeLevel))
lapply(as.list(df["income"]), FUN = incomeLevel)
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- as.numeric(today - (today %m-% months(df[, "months"])))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
# df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
df <- transform(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
lapply(as.list(df["income"]), FUN = incomeLevel)
lapply(c(1,2,3), FUN = incomeLevel)
as.list(df["income"])
class(as.list(df["income"]))
lapply(as.list(df["income"]), FUN = incomeLevel)
lapply(1:10, FUN =  incomeLevel)
df["income"]
class(df["income"])
as.list(df["income"])
class(as.list(df["income"]))
class(c(1,2,3))
class(c(1,2, "asdas"))
lapply(list(df["income"]), FUN =  incomeLevel)
apply(list(df["income"]), 1, FUN =  incomeLevel)
apply(df["income"], 1, FUN =  incomeLevel)
apply(df["income"], 1, FUN =  incomeLevel)[1]
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
apply(df["income"], 1, FUN =  incomeLevel)[1]
apply(df["income"], 1, FUN =  incomeLevel)[1^5]
apply(df["income"], 1, FUN =  incomeLevel)[1:5]
class(apply(df["income"], 1, FUN =  incomeLevel)[1:5])
class(apply(df["income"], 1, FUN =  incomeLevel))
y <- apply(df["income"], 1, FUN =  incomeLevel)[1:5]
y
y[1]
df[, "incomeLevle"]
df[, "incomeLevle"] <- NA
df[, "incomeLevle"]
class(df[, "incomeLevle"])
df[, "incomeLevle"] <- "a"
class(df[, "incomeLevle"])
df[, "incomeLevel"] <- apply(df["income"], 1, FUN =  incomeLevel)
df[1:5]
df[1:5,]
df[, "incomeLevel"] <- apply(df["income"], 1, FUN =  incomeLevel)
df
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- as.numeric(today - (today %m-% months(df[, "months"])))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
# df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
df <- transform(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
df[, "incomeLevle"] <- apply(df["income"], 1, FUN =  incomeLevel)
df
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])), output)
sub.df <- aggregate(df["age"], df["incomeLevel"], FUN=mean)
names(sub.df)[names(sub.df) == "age"] <- "averageAge"
write("Average age in each income groups:", output)
write.table(sub.df, file = "output.txt", sep = ";", append=TRUE)
dfSorted <- df[order(df[,"age"]),]
dfSorted <- subset(dfSorted, card == "no",)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(tail(dfSorted, 5), file = "output.txt", sep = ";", append=TRUE)
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(df[order(df["income"])[1:5], "majorcards"]),
file = "output.txt", append=TRUE)
close(output)
if (!require("lubridate")) install.packages("lubridate")
library("lubridate")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- as.numeric(today - (today %m-% months(df[, "months"])))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
# df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
df <- transform(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
df[, "incomeLevle"] <- apply(df["income"], 1, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])), output)
sub.df <- aggregate(df["age"], df["incomeLevel"], FUN=mean)
names(sub.df)[names(sub.df) == "age"] <- "averageAge"
write("Average age in each income groups:", output)
write("Average age in each income groups:", output, append=TRUE)
cat("Average age in each income groups",file="output.txt",append=TRUE)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])), output)
sub.df <- aggregate(df["age"], df["incomeLevel"], FUN=mean)
names(sub.df)[names(sub.df) == "age"] <- "averageAge"
cat("Average age in each income groups", file="output.txt", append=TRUE)
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- as.numeric(today - (today %m-% months(df[, "months"])))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
# df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
df <- transform(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
df[, "incomeLevel"] <- apply(df["income"], 1, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])), output)
sub.df <- aggregate(df["age"], df["incomeLevel"], FUN=mean)
names(sub.df)[names(sub.df) == "age"] <- "averageAge"
cat("Average age in each income groups", file="output.txt", append=TRUE)
write.table(sub.df, file = "output.txt", sep = ";", append=TRUE)
dfSorted <- df[order(df[,"age"]),]
dfSorted <- subset(dfSorted, card == "no",)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(tail(dfSorted, 5), file = "output.txt", sep = ";", append=TRUE)
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(df[order(df["income"])[1:5], "majorcards"]),
file = "output.txt", append=TRUE)
source("~/programming/R/Tasks/task1/task1.R")
source("~/programming/R/Tasks/task1/task1.R")
close(output)
if (!require("lubridate")) install.packages("lubridate")
library("lubridate")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- as.numeric(today - (today %m-% months(df[, "months"])))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
# df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
df <- transform(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
df[, "incomeLevel"] <- apply(df["income"], 1, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])), output)
sub.df <- aggregate(df["age"], df["incomeLevel"], FUN=mean)
names(sub.df)[names(sub.df) == "age"] <- "averageAge"
write("Average age in each income groups", file="output.txt", append=TRUE)
write.table(sub.df, file = "output.txt", sep = ";", append=TRUE)
dfSorted <- df[order(df[,"age"]),]
dfSorted <- subset(dfSorted, card == "no",)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(tail(dfSorted, 5), file = "output.txt", sep = ";", append=TRUE)
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(df[order(df["income"])[1:5], "majorcards"]),
file = "output.txt", append=TRUE)
close(output)
df[,"age"]
order(df[,"age"])
order(df[,"age"])[1:5]
dfSorted <- subset(df, card == "no",)
dfSorted <- dfSorted[order(dfSorted[,"age"])[1:5],]
dfSorted
order(dfSorted[,"age"])
dfSorted <- subset(df, card == "no",)
dfSorted <- order(dfSorted[,"age"])
dfSorted
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- subset(df, selfemp == "yes",)
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- as.numeric(today - (today %m-% months(df[, "months"])))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
# df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
df <- transform(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
df[, "incomeLevel"] <- apply(df["income"], 1, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])), output)
sub.df <- aggregate(df["age"], df["incomeLevel"], FUN=mean)
names(sub.df)[names(sub.df) == "age"] <- "averageAge"
write("Average age in each income groups", file="output.txt", append=TRUE)
write.table(sub.df, file = "output.txt", sep = ";", append=TRUE)
dfSorted <- subset(df, card == "no",)
dfSorted <- order(dfSorted[,"age"])
dfSorted
subset(df, card == "no",)
dfSorted <- subset(df, card == "no",)
dfSorted <- order(dfSorted[,"age"])
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(df[dfSorted[1:5],], file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(df[tail(dfSorted, 5),], file = "output.txt", sep = ";", append=TRUE)
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(df[order(df["income"])[1:5], "majorcards"]),
file = "output.txt", append=TRUE)
close(output)
dfSorted
dfSorted
df[dfSorted[1:5],]
dfSorted <- subset(df, card == "no",)
dfSorted
dfSorted[,"age"]
install.packages("devtools")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- filter(df, selfemp == "yes")
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df$months <- as.numeric(today - (today %m-% months(df$months)))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df <- mutate(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
if (!require("lubridate")) install.packages("lubridate")
# if (!require("tidyr")) install.packages("tidyr")
if (!require("tidyr")) install.packages("dplyr")
library("lubridate")
# library("tidyr")
library("dplyr")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- filter(df, selfemp == "yes")
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df$months <- as.numeric(today - (today %m-% months(df$months)))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df <- mutate(df, incomePerFamilyMember = income / (dependents + 1))
# Define criterion of income level, and split data according to levels of this criterion.
incomeLevel <- function(x){
if (x < 2.5)
"low"
else if (x <= 8)
"average"
else
"high"
}
df$incomeLevel <- lapply(df$income, FUN =  incomeLevel)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
write("Average amount of dependents for people don't own their home:", file="output.txt")
write(mean(filter(df, owner == "no")$dependents), file="output.txt", append=TRUE)
df %>% group_by(incomeLevel) %>% summarise(averageAge = mean(age))
dfSorted <- df[order(df[,"age"]),]
dfSorted <- subset(dfSorted, card == "no",)
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", sep = ";", append=TRUE)
write.table(dfSorted, file = "output.txt", sep = ";", append=TRUE)
dfSorted[1,]
class(dfSorted[1,])
class(dfSorted[1,"age"])
class(dfSorted[1,"incomeLevel"])
class(dfSorted[1,"card"])
