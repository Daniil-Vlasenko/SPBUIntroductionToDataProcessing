setwd(/home/daniil/programming/R/task1)
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df
install.packages("lubridate")
library("lubridate")
library("lubridate")
today <- as.Date(2000-01-01)
today <- as.Date("2000-01-01")
df
df[1:3]
df[,1:3]
df[,2]
df[1,2]
df[1,2:2]
df[1,2:5]
df[1,]
df[months] <- apply(df[months], function(x) {difftime(today, today %m-% months(x))})
df[months] <- apply(df[months], FUN = function(x) {difftime(today, today %m-% months(x))})
difftime(today, today %m-% months(2))
f <- function(x) difftime(today, today %m-% months(2))
df[months] <- apply(df[months], f)
df[months] <- apply(df[months], FUN = f)
f <- function(x) numeric(difftime(today, today %m-% months(2)))
f
f <- function(x) numeric(difftime(today, today %m-% months(x)))
f
f(2)
f <- function(x) difftime(today, today %m-% months(x))
f(2)
today %m-% months(x)
today %m-% months(2)
difftime(today, as.Date("1999-11-01"))
f <- function(x) difftime(today, today %m-% months(x))
f(2)
numeric(difftime(today, today %m-% months(2)))
today
today - month(1)
today - (today - month(1))
today - month(1)
today %m-% months(1)
today - (today %m-% months(1))
today - (today %m-% months(2))
f <- function(x) today - (today %m-% months(x))
f(2)
c <- function(x) today - (today %m-% months(x))
c(2)
numeric(today - (today %m-% months(1)))
a <- today - (today %m-% months(1))
a
a + 1
class(a)
str(a)
a
as.IDate("2001-01-05") - as.IDate("2001-01-01")
as.Date("2001-01-05") - as.Date("2001-01-01")
a <- today - (today %m-% months(1))
a
b <- as.numeric(a, units="days")
b
b <- as.numeric(a)
b
today - (today %m-% months(2))
as.numeric(today - (today %m-% months(2)))
rm(a)
rm(b)
rm(c)
rm(f)
f <- function(x) as.numeric(today - (today %m-% months(x)))
f(2)
f(3)
a <- apply(df["months"], f)
a <- apply(df["months"], FUN = f)
a <- vapply(df["months"], FUN = f, c(1, 2))
a <- sapply(df["months"], FUN = f
s
a <- sapply(df["months"], FUN = f)
a
df
df[df[month] = NA]
df[df[month] == NA]
df[df[month] == NA]
NA in df["month"]
"NA" in df["month"]
is.na(df["months"])
a <- sapply(df["months"], FUN = f)
a
a[1,1]
a[1]
df["months"] <- sapply(df["months"], FUN = f)
df["months"]
df["months"][1]
df["months"] <- a
df["months"]
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df["months"] <- sapply(df["months"], FUN = f)
a <- df["months"]
a[1]
a[1][1]
df["months"]
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df["months"]
df["months"] <- sapply(df["months"], FUN = f)
df["months"]
df[1,"months"]
names(df)[names(df) == "months"] <- "days"
df[1]
df[1,]
names(df)[names(df) == "months"] <- "days"
df["days"]
df["months"]
df["days"]
df[1,]
names(df)
names(df)[names(df) == "months"] <- "days"
df["incomePerFamilyMember"] <- sapply(df, FUN = function(x) df["income"] %/% (df["dependents"] + 1))
names(df)[names(df) == "months"] <- "days"
names(df)
df[1,]
df["incomePerFamilyMember"]
a <- sapply(df, FUN = function(x) df["income"] %/% (df["dependents"] + 1))
a[1]
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
names(df)
df["incomePerFamilyMember"] <- df["income"] %/% (df["dependents"] + 1)
df[5,]
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
df[1:5,]
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df["income"]
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";", stringsAsFactors = TRUE)
df
str(df)
summary(dat)
summary(df)
df[dv["incom"] < 5000]["incomeLevel"] <- "low"
df[df["incom"] < 5000]["incomeLevel"] <- "low"
df[df["incom"] < 5000]
df[df["income"] < 5000]
df[dv["income"] < 5000]["incomeLevel"] <- "low"
df[df["income"] < 5000]["incomeLevel"] <- "low"
df[df["income"] < 5000]["incomeLevel"] <- 2
df[df["income"] < 5000]["income]
d
ads
]
df[df["income"] < 5000]["income"]
df[df["income"] < 5000]["income"]
df[df["income"] < 5]["income"]
df[df["income"] > 5]["income"]
df[1,]
names(df)
df["incomePerFamilyMember"] <- df["income"] %/% (df["dependents"] + 1)
names(df)
df[1,]
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
df[1,]
df["incomeLevel"] <- 0
df[1,]
df[income < 5] <- "low"
df[df["income"] < 5] <- "low"
df[df["income"] < 5]["incomeLevel"] <- "low"
df[, df["income"] < 5]
df[, df[, "income"] < 5]
df[, "income"]
df[, "income"] < 5
df[, df[, "income"] < 5]
a = c(1, 2, 3 ,4)
a[TRUE, FALSE, TRUE, FALSE]
a[c(TRUE, FALSE, TRUE, FALSE)]
df[, c(df[, "income"] < 5)]
df[c(df[, "income"] < 5), "income"]
df[c(df[, "income"] < 5), "incomeLevel"] = "low"
df[1,]
df[c(df[, "income"] >= 5 & df[, "income"] < 10), "incomeLevel"] = "average"
df[c(df[, "income"] >= 10), "incomeLevel"] = "high"
df[1:10,]
df[1:40,]
df[1:100,]
df[df["incomeLevel"] == "high",]
df[df[, "income"] >= 10, "incomeLevel"] = "high"
rm(a)
rm(f)
rm(df)
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";", stringsAsFactors = TRUE)
df["incomeLevel"]
df["incomeLevel"] <-NA
df["incomeLevel"] <- 0
df["incomeLevel"] <-NA
df[1:5,]
rm(df)
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";", stringsAsFactors = TRUE)
df[df[, "income"] < 5, "incomeLevel"] = "low"
df[1:5,]
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";", stringsAsFactors = TRUE)
str(df)
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
str(df)
df <- df["selfemp"] = "yes"
df <- df["selfemp" == "yes";
df <- df["selfemp" == "yes"]
df
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- df[ df["selfemp" == "yes"], ]
df <- df[ df[, "selfemp"] == "yes", ]
df
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 10, "incomeLevel"] = "average"
df[df[, "income"] >= 10, "incomeLevel"] = "high"
df[df[, "income"] >= 10, "incomeLevel"]
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- df[ df[, "selfemp"] == "yes", ]
df
file.create(output.txt, showWarnings = TRUE)
file.create("output.txt", showWarnings = TRUE)
file.create("output.txt", showWarnings = TRUE)
file.create("output.txt")
file<-file("output.txt")
output<-file("output.txt")
rm(file)
mean(df[df[, owner] == "no", "dependents"])
mean(df[df[, "owner"] == "no", "dependents"])
writeLines(c("Average amount of dependents for people don't own their home:", mean(df[df[, "owner"] == "no", "dependents"])), fileConn)
writeLines(c("Average amount of dependents for people don't own their home:", mean(df[df[, "owner"] == "no", "dependents"])), output)
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"]), "\n"), output)
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"]), "\n"), output)
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])), output)
mean(df[df[, "incomeLevel"] == "low", "age"])
mean(df[df[, "incomeLevel"] == "low"], "age"])
mean(df[df[, "owner"] == "no", "dependents"])
mean(df[df[, "incomeLevel"] == "low", "age"])
df[df[, "incomeLevel"] == "low", "age"]
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
df[df[, "incomeLevel"] == "low", "age"]
mean(df[df[, "incomeLevel"] == "low", "age"])
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"])),
"Average amount of age for people with low income:",
mean(df[df[, "incomeLevel"] == "low", "age"]),
"Average amount of age for people with average income:",
mean(df[df[, "incomeLevel"] == "average", "age"]),
"Average amount of age for people with high income:",
mean(df[df[, "incomeLevel"] == "high", "age"]),
output)
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"]),
"Average amount of age for people with low income:",
mean(df[df[, "incomeLevel"] == "low", "age"]),
"Average amount of age for people with average income:",
mean(df[df[, "incomeLevel"] == "average", "age"]),
"Average amount of age for people with high income:",
mean(df[df[, "incomeLevel"] == "high", "age"])),
output)
df
df[order(df[,["age"]]),]
df[,["age"]]
df[order(df[,"age"]),]
df[order(df[,"age"]) and df[,"card"] == "no",]
df[order(df[,"age"]) & df[,"card"] == "no",]
df[order(df[,"age"]),]
dfSorted <- df[order(df[,"age"]),]
dfSorted <- dfSorted[dfSorted[,"card"] = "no",]
dfSorted <- dfSorted[dfSorted[,"card"] == "no",]
dfSorted
dfSorted[1:5,]
tail(dfSorted, 5)
writeLines(c("Top 5 youngest and eldest people, whose application was declined: ",
dfSorted[1:5,], tail(dfSorted, 5)), output)
writeLines("Top 5 youngest and eldest people, whose application was declined: ", output)
writeLines("Top 5 youngest and eldest people, whose application was declined: ", output, ,append=TRUE)
writeLines("Top 5 youngest and eldest people, whose application was declined: ", output, append=TRUE)
write("Top 5 youngest and eldest people, whose application was declined: ", output, append=TRUE)
write("Top 5 youngest and eldest people, whose application was declined: ", output, append=TRUE)
write("asdasdasd", output, append=TRUE)
write("2222", output, append=TRUE)
write("2222", file = "output.txt", append=TRUE)
write("Top 5 youngest and eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write(dfSorted[1:5,], file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", append=TRUE)
write.table(tail(dfSorted, 5), file = "output.txt", append=TRUE, col.names = FALSE)
write.table(tail(dfSorted, 5), file = "output.txt", sep = ";", append=TRUE, col.names = FALSE)
dfSorted <- df[order(df[,"income"]),]
dfSorted
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
dfSorted <- df[order(df[,"income"]),]
dfSorted
mean(tail(dfSorted, 10)[, "majorcards"])
tail(dfSorted, 10)
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(tail(dfSorted, 10)[, "majorcards"]),
file = "output.txt", append=TRUE)
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
today <- as.Date("2000-01-01")
df[,"months"] <- sapply(df["months"], FUN = f)
f <- function(x) as.numeric(today - (today %m-% months(x)))
df["months"] <- sapply(df["months"], FUN = f)
df[,"months"] <- sapply(df["months"], FUN = f)
rm(f)
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
today <- as.Date("2000-01-01")
df[, "months"] <- sapply(df["months"], FUN = function(x) as.numeric(today - (today %m-% months(x))))
df[1:5,]
order(df[,"age"])
dfSorted <- df[order(df[,"age"]) & dfSorted[,"card"] == "no",]
dfSorted
dfSorted <- df[order(df[,"age"]),]
dfSorted
df[, "months"] <- sapply(df["months"], FUN = function(x) as.numeric(today - (today %m-% months(x))))
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
install.packages("lubridate")
library("lubridate")
library("lubridate")
require("lubridate")
cat(2)
cat(require("lubridate"))
if (require("lubridate")) install.packages("lubridate")
if (!require("lubridate")) install.packages("lubridate")
library("lubridate")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- df[ df[, "selfemp"] == "yes", ]
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- sapply(df["months"], FUN = function(x) as.numeric(today - (today %m-% months(x))))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
# Define criterion of income level, and split data according to levels of this criterion.
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"]),
"Average amount of age for people with low income:",
mean(df[df[, "incomeLevel"] == "low", "age"]),
"Average amount of age for people with average income:",
mean(df[df[, "incomeLevel"] == "average", "age"]),
"Average amount of age for people with high income:",
mean(df[df[, "incomeLevel"] == "high", "age"])),
output)
dfSorted <- df[order(df[,"age"]),]
dfSorted <- dfSorted[dfSorted[,"card"] == "no",]
write("Top 5 youngest and eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", sep = ";", append=TRUE)
write.table(tail(dfSorted, 5), file = "output.txt", sep = ";", append=TRUE, col.names = FALSE)
dfSorted <- df[order(df[,"income"]),]
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(tail(dfSorted, 10)[, "majorcards"]),
file = "output.txt", append=TRUE)
close(output)
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
if (!require("lubridate")) install.packages("lubridate")
library("lubridate")
# 1.
# Create a dateframe of self-employed.
df <- read.table("study_fall2021_intror_creditcard.txt", header=TRUE, sep=";")
df <- df[ df[, "selfemp"] == "yes", ]
# Convert amount of months applicant living at his/her current address to days.
today <- as.Date("2000-01-01")
df[, "months"] <- sapply(df["months"], FUN = function(x) as.numeric(today - (today %m-% months(x))))
names(df)[names(df) == "months"] <- "days"
# Add column with income per family member.
# Due to the lack of information about a person's family,
# we assume that dependents are family members without the applicant.
df["incomePerFamilyMember"] <- df["income"] / (df["dependents"] + 1)
# Define criterion of income level, and split data according to levels of this criterion.
df[df[, "income"] < 2.5, "incomeLevel"] = "low"
df[df[, "income"] >= 2.5 & df[, "income"] < 8, "incomeLevel"] = "average"
df[df[, "income"] >= 8, "incomeLevel"] = "high"
# 2.
# Print some information about dataset.
file.create("output.txt", showWarnings = TRUE)
output <-file("output.txt")
writeLines(c("Average amount of dependents for people don't own their home:",
mean(df[df[, "owner"] == "no", "dependents"]),
"Average amount of age for people with low income:",
mean(df[df[, "incomeLevel"] == "low", "age"]),
"Average amount of age for people with average income:",
mean(df[df[, "incomeLevel"] == "average", "age"]),
"Average amount of age for people with high income:",
mean(df[df[, "incomeLevel"] == "high", "age"])),
output)
dfSorted <- df[order(df[,"age"]),]
dfSorted <- dfSorted[dfSorted[,"card"] == "no",]
write("Top 5 youngest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(dfSorted[1:5,], file = "output.txt", sep = ";", append=TRUE)
write("Top 5 eldest people, whose application was declined: ",
file = "output.txt", append=TRUE)
write.table(tail(dfSorted, 5), file = "output.txt", sep = ";", append=TRUE, col.names = FALSE)
dfSorted <- df[order(df[,"income"]),]
write("Average number of major CCs held for people with top 10 income: ",
file = "output.txt", append=TRUE)
write(mean(tail(dfSorted, 10)[, "majorcards"]),
file = "output.txt", append=TRUE)
close(output)
tail(dfSorted, 10)
dfSorted <- df[order(df[,"age"]),]
dfSorted <- dfSorted[dfSorted[,"card"] == "no",]
dfSorted[1:5,]
tail(dfSorted, 5)
dfSorted <- df[order(df[,"income"]),]
tail(dfSorted, 10)
